(defun rgbToGrayscale (rgbArray)
  (setf size (length rgbArray))
  (setf count 0)
  (dotimes (x (/ size 3))
    (setf newBlue (* (aref rgbArray (+ 0 count)) .07))
    (setf newGreen (* (aref rgbArray (+ 1 count)) .72))
    (setf newRed (* (aref rgbArray (+ 2 count)) .21))
    (setf newVal (floor (+ (+ newBlue newGreen) newRed)))
    (setf (aref rgbArray (+ 0 count)) newVal) 
    (setf (aref rgbArray (+ 1 count)) newVal) 
    (setf (aref rgbArray (+ 2 count)) newVal) 
    (setf count (+ 3 count))
    )
)


(defun changeColor (rgbArray r g b)
  (setf size (length rgbArray))
  (setf count 0)
  (dotimes (x (/ size 3))
    (setf newRed (* (aref rgbArray (+ 2 count)) r))
    (if (< 255 newRed) (setf newRed 255))
    (setf newGreen (* (aref rgbArray (+ 1 count)) g))
    (if (< 255 newGreen) (setf newGreen 255))
    (setf newBlue (* (aref rgbArray (+ 0 count)) b))
    (if (< 255 newBlue) (setf newBlue 255))
    (setf (aref rgbArray (+ 2 count)) (floor newRed)) 
    (setf (aref rgbArray (+ 1 count)) (floor newGreen)) 
    (setf (aref rgbArray (+ 0 count)) (floor newBlue)) 
    (setf count (+ 3 count))
    )
)
